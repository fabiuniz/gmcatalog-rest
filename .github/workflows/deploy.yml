name: Deploy to Google Cloud Platform

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  SERVICE_NAME: gmcatalog-rest
  IMAGE_NAME: gmcatalog-rest

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: ./mvnw clean test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      run: ./mvnw clean package -DskipTests

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker

    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$IMAGE_NAME:latest

    - name: Push Docker image to Container Registry
      run: |
        docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $GCP_REGION \
          --allow-unauthenticated \
          --set-env-vars="APP_PROFILE=prod" \
          --set-env-vars="DB_URL=${{ secrets.DB_URL }}" \
          --set-env-vars="DB_USERNAME=${{ secrets.DB_USERNAME }}" \
          --set-env-vars="DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
          --set-env-vars="CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" \
          --memory=1Gi \
          --cpu=1 \
          --max-instances=10 \
          --timeout=300s

    - name: Get Cloud Run URL
      id: deploy
      run: |
        URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $GCP_REGION --format 'value(status.url)')
        echo "url=$URL" >> $GITHUB_OUTPUT
        echo "Service deployed at: $URL"

  deploy-database:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Create Cloud SQL instance (if not exists)
      continue-on-error: true
      run: |
        gcloud sql instances create gmcatalog-db \
          --database-version=POSTGRES_14 \
          --tier=db-f1-micro \
          --region=$GCP_REGION \
          --storage-type=SSD \
          --storage-size=10GB \
          --backup-start-time=03:00 \
          --enable-bin-log \
          --maintenance-release-channel=production \
          --maintenance-window-day=SUN \
          --maintenance-window-hour=04

    - name: Create database (if not exists)
      continue-on-error: true
      run: |
        gcloud sql databases create gmcatalog --instance=gmcatalog-db

    - name: Set database user password
      continue-on-error: true
      run: |
        gcloud sql users set-password postgres \
          --host=% \
          --instance=gmcatalog-db \
          --password=${{ secrets.DB_PASSWORD }}